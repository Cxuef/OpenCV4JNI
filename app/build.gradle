import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.application'
android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "com.ckt.eirot.opencv4jni"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            moduleName "grayprocess"
            ldLibs "log", "z", "m"
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
        }

        externalNativeBuild {
            // we use ndkBuild for our exist ndk project
            ndkBuild {
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            String apk_name = output.outputFile.name;
            if(output.outputFile.name.indexOf('-debug.apk') > -1){
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replace(apk_name, "OpenCV4JNI-debug.apk"))
            }else if(output.outputFile.name.indexOf('-release.apk') > -1){
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replace(apk_name, "OpenCV4JNI.apk"))
            }
        }
    }

    sourceSets.main {
        jniLibs.srcDirs = ['src/main/libs', 'src/main/jniLibs']
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ndkDir = properties.getProperty('ndk.dir')

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "$ndkDir/ndk-build.cmd", '-C', file('src/main/jni').absolutePath
        } else {
            commandLine "$ndkDir/ndk-build", '-C', file('src/main/jni').absolutePath
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    externalNativeBuild {
        /*cmake {
            path "src/main/cpp/CMakeLists.txt"
        }*/
        // For ndk-build, instead use ndkBuild {} not cmake{}
        ndkBuild {
            /**
             * https://developer.android.com/studio/projects/add-native-code.html#link-gradle
             * Manually configure Gradle
             * Gradle also includes the Application.mk file if it is located in the same directory as your Android.mk file.
             * path "src/main/jni/Application.mk"
             */

            path "src/main/jni/Android.mk"
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
        debug {
            jniDebuggable true
        }
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        compile 'com.android.support:appcompat-v7:25.3.1'
        compile 'com.google.firebase:firebase-core:10.2.6'
        testCompile 'junit:junit:4.12'
    }
}

// ADD THIS AT THE BOTTOM
apply plugin: 'com.google.gms.google-services'